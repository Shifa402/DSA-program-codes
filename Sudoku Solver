//Recursive Backtracking (e.g., Sudoku Solver):
//Implement a recursive backtracking algorithm to solve a specific problem, such as Sudoku or the
//N-Queens puzzle. These problems often involve making a series of choices and undoing them if
//they lead to a dead-end solution.

#include <iostream>
#include <vector>
using namespace std;

const int N = 9; 

bool isSafe(vector<vector<int>>& board, int row, int col, int num) {
    // Check if 'num' is not present in the current row or column
    for (int i = 0; i < N; ++i) {
        if (board[row][i] == num || board[i][col] == num) {
            return false;
        }
    }

    // Check if 'num' is not present in the current 3x3 sub-grid
    int startRow = row - (row % 3);
    int startCol = col - (col % 3);
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[startRow + i][startCol + j] == num) {
                return false;
            }
        }
    }

    return true;
}

bool solveSudoku(vector<vector<int>>& board) {
    for (int row = 0; row < N; ++row) {
        for (int col = 0; col < N; ++col) {
            if (board[row][col] == 0) {
                for (int num = 1; num <= 9; ++num) {
                    if (isSafe(board, row, col, num)) {
                        board[row][col] = num;
                        if (solveSudoku(board)) {
                            return true; // Recursive call
                        }
                        board[row][col] = 0; // If not successful, backtrack
                    }
                }
                return false; // No valid number found, trigger backtracking
            }
        }
    }
    return true; // All cells are filled
}

void printSudoku(vector<vector<int>>& board) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> board = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku(board)) {
        cout << "Solved Sudoku:" << endl;
        printSudoku(board);
    }
    else {
        cout << "No solution." << endl;
    }

}
