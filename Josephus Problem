//Josephus Problem
//History: This problem is named after Flavius Josephus, a Jewish historian living in the 1st century. According to Josephus' account of the siege of Yodfat, he and his 40
//soldiers were trapped in a cave by Roman soldiers. They chose suicide over capture, and settled on a serial method of committing suicide by drawing lots. Josephus states
//that by luck or possibly by the hand of God, he and another man remained until the end and surrendered to the Romans rather than killing themselves. This is the story
//given in Book 3, Chapter 8, part 7 of Josephus' The Jewish War (writing of himself in the third person) In computer science and mathematics, the Josephus problem
//(or Josephus permutation) is a theoretical problem related to a certain counting-out game. https://en.wikipedia.org/wiki/Josephus_problem
//1. People (any number N >1) are standing in a circle waiting to be executed. 2. Counting begins at a specified point (S selected randomly) in the circle and
//proceeds around the circle in a specified direction. You can assume that it is clockwise. 3. After a specified number of people are skipped, say (k-1), the next (kth) person
//is executed. The procedure is repeated with the remaining people, starting with the next person, going in the same direction and skipping the same number of people
//(k-1), until only one person remains, and is freed. Write a C++ program that solves the Josephus problem by using a Queue data structure. Your program should take N and K input from the user. 
//Design a graphical user interface that will update with every move.

//NOTE: Make sure to have SFML set up in your laptop

#include<SFML/Graphics.hpp>
#include<iostream>
#include<vector>
#include<list>
#include<cstdlib>
using namespace std;
using namespace sf;

template <class T>
class queue {
private:
    list<T> elements;

public:
    void push(const T& element) {
        elements.push_back(element);
    }

    T pop() {
        if (!empty()) {
            T front = elements.front();
            elements.pop_front();
            return front;
        }
        cout << "Queue is empty";
    }

    const T& front() const {
        if (!empty()) {
            return elements.front();
        }
        cout << "Queue is empty";
    }

    bool empty() const {
        return elements.empty();
    }

    int size() const {
        return elements.size();
    }
};


struct Person {
    CircleShape shape;
    int position = 0;

};

const int windowWidth = 800;
const int windowHeight = 600;

class JosephusSimulator {
public:
    JosephusSimulator(int n, int k);

    void run();

private:
    int n;
    int k;
    RenderWindow window;
    queue<Person> peopleQueue;
    queue<int> eliminatedPositions;
    //Texture emptyTexture;

    void initializePeople();
    void update();
};

JosephusSimulator::JosephusSimulator(int n, int k) : n(n), k(k) {
    window.create(VideoMode(windowWidth, windowHeight), "Josephus Problem");

    initializePeople();
}

void JosephusSimulator::initializePeople() {
    srand(static_cast<unsigned>(time(nullptr)));

    
    for (int i = 1; i <= n; i++) {
        Person person;
        person.position = i;
        person.shape.setRadius(20);
        person.shape.setFillColor(Color::Magenta);
        person.shape.setPosition(Vector2f(windowWidth / 2 + 200 * cos(2 * 3.1415 * i / n),
            windowHeight / 2 + 200 * sin(2 * 3.1415 * i / n)));
        peopleQueue.push(person);
    }


    int randomStart = rand() % n;
    for (int i = 0; i < randomStart; i++) {
            int frontPerson;
            peopleQueue.push(peopleQueue.front());
            peopleQueue.pop();
    }
}

void JosephusSimulator::update() {
    for (int i = 0; i < k ; i++) {
        int frontPerson;
        peopleQueue.push(peopleQueue.front());
        peopleQueue.pop();
    }

    int eliminatedPerson = peopleQueue.front().position;
    eliminatedPositions.push(eliminatedPerson);
    peopleQueue.pop();

    cout << "Person at position " << eliminatedPerson << " is eliminated." << endl;

    if (peopleQueue.size() <= 1) {
        int survivingPerson = peopleQueue.front().position;
        cout << "The last person standing is at position " << survivingPerson << endl;
        window.close();
    }
}


void JosephusSimulator::run() {
    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }
        }

        while (peopleQueue.size() > 1) {
            window.clear();

            for (queue<Person> tempQueue = peopleQueue; !tempQueue.empty(); tempQueue.pop()) {
                            const Person& person = tempQueue.front();
                            window.draw(person.shape);
            }

            window.display();

            if (Keyboard::isKeyPressed(Keyboard::Space)) {
                update();
                sf::sleep(sf::milliseconds(500)); // Delay for 500 milliseconds
            }
        }

        if (!peopleQueue.empty()) {
            window.clear();
            const Person& lastPerson = peopleQueue.front();
            window.draw(lastPerson.shape);
            window.display();
        }
    }
}
 
int main() {
    int N, K;
    cout << "Enter the total number of people (N): ";
    cin >> N;
    cout << "Enter the elimination interval (K): ";
    cin >> K;

    JosephusSimulator simulator(N, K);
    simulator.run();
}
